############ 1. Create the ROS 2 Package

cd Moppy/andino_ws/src
ros2 pkg create --build-type ament_python image_data_collector --dependencies rclpy sensor_msgs cv_bridge

------------------------------------------------------------------------------------------------

############ 2. Implement the ROS 2 Node (Python Script)


import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2
import os
import time
from datetime import datetime

# Import ROS 2 service for triggering image saves (optional, but good for control)
from std_srvs.srv import Empty

class ImageDataCollector(Node):
    """
    A ROS 2 node to subscribe to a camera topic, convert images, and save them
    to a specified directory. Images can be saved on demand via a service call.
    """
    def __init__(self):
        super().__init__('image_data_collector')

        # Declare parameters for camera topic and save directory
        self.declare_parameter('camera_topic', '/image_raw')
        self.declare_parameter('save_directory', os.path.join(os.getenv('HOME'), 'Moppy', 'ml_pipeline', 'data', 'raw_images'))
        self.declare_parameter('save_on_demand', True) # If True, saves only when service is called

        self.camera_topic = self.get_parameter('camera_topic').get_parameter_value().string_value
        self.save_directory = self.get_parameter('save_directory').get_parameter_value().string_value
        self.save_on_demand = self.get_parameter('save_on_demand').get_parameter_value().bool_value

        # Create the save directory if it doesn't exist
        os.makedirs(self.save_directory, exist_ok=True)
        self.get_logger().info(f"Saving images to: {self.save_directory}")

        self.bridge = CvBridge()
        self.image_counter = 0 # To keep track of saved images

        # Subscriber for the camera image topic
        self.subscription = self.create_subscription(
            Image,
            self.camera_topic,
            self.image_callback,
            10 # QoS history depth
        )
        self.subscription # prevent unused variable warning

        self.latest_image_msg = None # Store the latest image message

        if self.save_on_demand:
            # Create a service to trigger saving the latest image
            self.save_image_service = self.create_service(
                Empty,
                'save_single_image',
                self.save_image_service_callback
            )
            self.get_logger().info("Image data collector node started. Call 'save_single_image' service to save an image.")
        else:
            # If not saving on demand, you could add a timer here to save periodically
            # For this example, we'll focus on the on-demand saving, as it's better for controlled data collection.
            self.get_logger().info("Image data collector node started. Saving images periodically is not implemented in this version.")


    def image_callback(self, msg):
        """
        Callback function for the camera image subscriber.
        Stores the latest image message.
        """
        self.latest_image_msg = msg
        # If not saving on demand, you would save directly here, possibly with a rate limit
        # if not self.save_on_demand:
        #     self._save_image_from_msg(msg)


    def save_image_service_callback(self, request, response):
        """
        Service callback to save the latest received image.
        """
        if self.latest_image_msg is not None:
            self.get_logger().info('Received request to save image...')
            self._save_image_from_msg(self.latest_image_msg)
            self.get_logger().info('Image saved successfully.')
        else:
            self.get_logger().warn('No image received yet to save.')
        return response

    def _save_image_from_msg(self, msg):
        """
        Helper function to convert and save an image message.
        """
        try:
            # Convert ROS Image message to OpenCV image
            cv_image = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')

            # Generate a unique filename using timestamp and counter
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")
            filename = os.path.join(self.save_directory, f"image_{timestamp}_{self.image_counter:04d}.png")

            # Save the image
            cv2.imwrite(filename, cv_image)
            self.image_counter += 1
            self.get_logger().info(f"Saved image: {filename}")

        except Exception as e:
            self.get_logger().error(f"Error saving image: {e}")

def main(args=None):
    rclpy.init(args=args)
    image_data_collector = ImageDataCollector()
    rclpy.spin(image_data_collector)
    image_data_collector.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()


------------------------------------------------------------------------------------------------

############ 3. Update setup.py

from setuptools import find_packages, setup

package_name = 'image_data_collector'

setup(
    name=package_name,
    version='0.0.0',
    packages=find_packages(exclude=['test']),
    data_files=[
        ('share/' + package_name, ['package.xml']),
        ('share/' + package_name + '/resource', ['resource/' + package_name]),
        ('share/ament_index/resource_index/packages', ['resource/' + package_name]),
    ],
    install_requires=['setuptools'],
    zip_safe=True,
    maintainer='your_name', # Replace with your name
    maintainer_email='your_email@example.com', # Replace with your email
    description='ROS 2 node for collecting camera images for ML dataset.',
    license='Apache-2.0', # Or appropriate license
    tests_require=['pytest'],
    entry_points={
        'console_scripts': [
            'image_saver_node = image_data_collector.image_saver_node:main',
        ],
    },
)

------------------------------------------------------------------------------------------------

############ 4. Update package.xml

<?xml version="1.0"?>
<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
<package format="3">
  <name>image_data_collector</name>
  <version>0.0.0</version>
  <description>ROS 2 node for collecting camera images for ML dataset.</description>
  <maintainer email="your_email@example.com">your_name</maintainer>
  <license>Apache-2.0</license>

  <depend>rclpy</depend>
  <depend>sensor_msgs</depend>
  <depend>cv_bridge</depend>
  <!-- Add opencv-python as a system dependency, it's not a ROS package -->
  <exec_depend>python3-opencv</exec_depend> 

  <test_depend>ament_copyright</test_depend>
  <test_depend>ament_flake8</test_depend>
  <test_depend>ament_pep257</test_depend>
  <test_depend>python3-pytest</test_depend>

  <export>
    <build_type>ament_python</build_type>
  </export>
</package>

------------------------------------------------------------------------------------------------

############ build and run

cd Moppy/andino_ws
colcon build --packages-select image_data_collector

Launch your robot's camera driver: Make sure your andino_robot.launch.py (or equivalent) is running and publishing to /image_raw.

ros2 launch andino_bringup andino_robot.launch.py # Or your camera launch file
Run the image data collector node:

ros2 run image_data_collector image_saver_node
You can also set parameters directly:

ros2 run image_data_collector image_saver_node --ros-args -p camera_topic:=/your_camera_topic -p save_directory:=/path/to/your/custom/dir
Trigger image saving:
With the image_saver_node running, you can trigger saving an image by calling its service:

ros2 service call /save_single_image std_srvs/srv/Empty "{}"
Each time you call this service, the latest image received by the node will be saved to your Moppy/ml_pipeline/data/raw_images folder with a unique timestamped filename.

